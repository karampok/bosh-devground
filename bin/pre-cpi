#!/bin/bash
set -euo pipefail

state_dir="${ENV_DIR}/$DIRECTOR-${ENV_TYPE}/creds"
mkdir -p "${state_dir}"

execute-add() {
  after-"$action"-"$ENV_TYPE"
  echo  "source ${state_dir}/tform.vars"
}

execute-remove() {
  after-"$action"-"$ENV_TYPE"
  rm  -rf "${state_dir}"
}


after-add-aws() {
  user_name=$DIRECTOR-bbl
  aws iam create-user --user-name "$user_name" || true
  aws iam put-user-policy --user-name "$user_name" \
	  --policy-name "$user_name"-policy \
	  --policy-document "$(cat infrastructure/aws/policy.json)"
  if [ ! -f  "${state_dir}/aws-key.json" ]; then
    aws iam create-access-key --user-name "$user_name" > "${state_dir}/aws-key.json"
  fi

  ssh_bosh_path=${state_dir}/bosh_key
  if [ ! -f   ${state_dir}/bosh_ssh_key ]
  then
      ssh-keygen -t rsa -C bosh_key -P '' -f ${state_dir}/bosh_ssh_key -b 2048
      chmod 400 ${state_dir}/bosh_ssh_key
  fi

  cat <<EOF >"${state_dir}/tform.vars"
export TF_VAR_prefix="${DIRECTOR}"
export TF_VAR_region=eu-central-1
export TF_VAR_zone=eu-central-1a
export TF_VAR_access_key=$(cat "${state_dir}/aws-key.json"| jq '.AccessKey.AccessKeyId' -r)
export TF_VAR_secret_key=$(cat "${state_dir}/aws-key.json"| jq '.AccessKey.SecretAccessKey' -r)
export TF_VAR_bosh_ssh_pub_key="$(cat ${state_dir}/bosh_ssh_key.pub)"
export TF_VAR_user_ssh_pub_key="$(ssh-add -L| head -1|awk '{print $1" "$2}')"

 export BBL_ENV_NAME=${DIRECTOR}
 export BBL_STATE_DIR=${state_dir}
 export BBL_IAAS=aws
 export BBL_AWS_ACCESS_KEY_ID=$(cat "${state_dir}/aws-key.json"| jq '.AccessKey.AccessKeyId' -r)
 export BBL_AWS_SECRET_ACCESS_KEY=$(cat "${state_dir}/aws-key.json"| jq '.AccessKey.SecretAccessKey' -r)
 export BBL_AWS_REGION=eu-central-1

EOF
}

after-remove-aws() {
  user_name=$DIRECTOR-bbl

  aws iam delete-user-policy --user-name "$user_name" \
      --policy-name "$user_name"-policy || true
  aws iam delete-access-key --user-name "$user_name" \
      --access-key-id $(cat "${state_dir}/aws-key.json"| jq '.AccessKey.AccessKeyId' -r)
  aws iam delete-user --user-name "$user_name" ||true
}


after-add-gcp() {
  project_id=$(gcloud config get-value project)
  service_account_email=$DIRECTOR-terraform@${project_id}.iam.gserviceaccount.com

  gcloud iam service-accounts create $DIRECTOR-terraform  --display-name $(gcloud config get-value account) || true

  if [ ! -f  "${state_dir}/gcp-tform.key.json" ]; then
    gcloud iam service-accounts keys create "${state_dir}/gcp-tform.key.json" \
    --iam-account ${service_account_email}
  fi

  gcloud projects add-iam-policy-binding ${project_id} \
      --member serviceAccount:${service_account_email} \
      --role roles/owner

  cat <<EOF >"${state_dir}/tform.vars"
export TF_VAR_prefix="${DIRECTOR}"
export TF_VAR_project_id="${project_id}"
export TF_VAR_service_account_email="${service_account_email}"
TF_VAR_service_account_key_file="${state_dir}/gcp-tform.key.json"
export TF_VAR_service_account_key_file
export TF_VAR_ssh_user="$(whoami)"
export TF_VAR_ssh_pub_key="$(ssh-add -L| head -1)"
EOF

}

after-remove-gcp() {
  project_id=$(gcloud config get-value project)
  service_account_email=${DIRECTOR}-terraform@${project_id}.iam.gserviceaccount.com

  echo  "deleting account in gcp"
  gcloud projects remove-iam-policy-binding ${project_id} \
      --member serviceAccount:${service_account_email} \
      --role roles/owner
  gcloud iam service-accounts delete ${service_account_email}
}

action=${1:-add} #"usage: $0 <add|remove>"
echo "$action"-ing creds for $ENV_TYPE
execute-"$action"
